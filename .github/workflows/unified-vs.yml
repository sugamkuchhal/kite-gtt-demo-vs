name: Unified Script Runner VS

on:
  schedule:
    - cron: "0,30 4-9 * * 1-5"
    - cron: "30 11 * * 1-5"
  workflow_dispatch:
    inputs:
      command:
        description: "Optional command (e.g. python3 fetch_holdings_vs.py)"
        required: false
        default: ""
      run_type:
        description: "auto / midday / eod"
        required: false
        type: choice
        options:
          - auto
          - midday
          - eod
        default: auto

concurrency:
  group: unified-script-runner-vs
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Create venv and minimal deps
        shell: bash
        run: |
          set -e
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install kiteconnect requests

      - name: Write secrets and preflight auth
        id: preflight
        shell: bash
        env:
          API_KEY_VS: ${{ secrets.API_KEY_VS }}
          ACCESS_TOKEN_VS: ${{ secrets.ACCESS_TOKEN_VS }}
        run: |
          set -e
          printf '%s' "${API_KEY_VS}" > api_key_vs.txt
          printf '%s' "${ACCESS_TOKEN_VS:-}" > access_token_vs.txt

          source .venv/bin/activate
          STATUS="refresh"
          if [ -s access_token_vs.txt ]; then
            python -c "from kiteconnect import KiteConnect; import sys;
lines=[l.strip() for l in open('api_key_vs.txt')];
api_key=lines[0]; token=open('access_token_vs.txt').read().strip();
kite=KiteConnect(api_key=api_key);
kite.set_access_token(token);
try: kite.margins(); sys.exit(0)
except Exception: sys.exit(1)" && STATUS="ok" || STATUS="refresh"
          fi
          echo "auth_status=${STATUS}" >> "$GITHUB_OUTPUT"
          echo "::notice::Kite preflight: ${STATUS}"

      - name: Setup Chrome (only if auth refresh needed)
        if: ${{ steps.preflight.outputs.auth_status == 'refresh' }}
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install automation deps (only if refresh needed)
        if: ${{ steps.preflight.outputs.auth_status == 'refresh' }}
        shell: bash
        run: |
          set -e
          source .venv/bin/activate
          pip install selenium pyotp webdriver-manager

      - name: Refresh token via auto_login_vs.py (only if refresh needed)
        if: ${{ steps.preflight.outputs.auth_status == 'refresh' }}
        shell: bash
        env:
          CI: "true"
        run: |
          set -e
          source .venv/bin/activate
          echo "::notice::Running headless login to refresh token..."
          python3 auto_login_vs.py
          if [ ! -s access_token_vs.txt ]; then
            echo "::error::Token refresh failed; file missing."
            exit 1
          fi
          echo "::notice::Token refreshed successfully."

      - name: Install full project deps
        shell: bash
        run: |
          set -e
          source .venv/bin/activate
          pip install \
            gspread gspread-formatting kiteconnect pandas requests \
            retrying tqdm google-auth google-auth-oauthlib google-auth-httplib2 \
            selenium pyotp yfinance oauth2client google-api-python-client

      - name: Run (manual command or auto/midday/eod)
        env:
          INPUT_COMMAND: ${{ github.event.inputs.command }}
          RUN_TYPE: ${{ github.event.inputs.run_type }}
        shell: bash
        run: |
          set -e
          source .venv/bin/activate

          # Manual override
          if [ -n "${INPUT_COMMAND:-}" ]; then
            echo "::notice::manual: $INPUT_COMMAND"
            eval "$INPUT_COMMAND"
            exit 0
          fi

          # Decide run_type by IST time
          hm_to_min(){ IFS=: read -r h m <<<"$1"; echo $((10#$h*60+10#$m)); }
          NOW_HM="$(TZ=Asia/Kolkata date +%H:%M)"
          NOW_MIN="$(hm_to_min "$NOW_HM")"
          MID_START="$(hm_to_min 09:00)"
          MID_END="$(hm_to_min 15:45)"
          RT="${RUN_TYPE:-auto}"
          IN_MIDDAY=false
          [ $NOW_MIN -ge $MID_START ] && [ $NOW_MIN -le $MID_END ] && IN_MIDDAY=true || true

          case "$RT" in
            midday) RUN_MIDDAY=true ;;
            eod)    RUN_MIDDAY=false ;;
            *)      RUN_MIDDAY=$([ "$IN_MIDDAY" = true ] && echo true || echo false) ;;
          esac

          # Execute chain
          if [ "$RUN_MIDDAY" = true ]; then
            echo "::group::RUN: Mid-day chain (VS)"
            python3 set_field_false_vs.py
            python3 fetch_all_gtts_vs.py
            python3 fetch_all_orders_vs.py
            python3 gtt_processor_vs.py --sheet-id "145TqrpQ3Twx6Tezh28s5GnbowlBb_qcY5UM1RvfIclI" --sheet-name "DEL_GTT_INS"
            python3 gtt_processor_vs.py --sheet-id "145TqrpQ3Twx6Tezh28s5GnbowlBb_qcY5UM1RvfIclI" --sheet-name "INS_GTT_INS"
            python3 gtt_processor_vs.py --sheet-id "145TqrpQ3Twx6Tezh28s5GnbowlBb_qcY5UM1RvfIclI" --sheet-name "GTT_INS"
            echo "::endgroup::"
          else
            echo "::group::RUN: EOD chain (VS)"
            python3 set_field_false_vs.py
            python3 fetch_all_gtts_vs.py
            python3 fetch_all_orders_vs.py
            python3 append_new_orders_vs.py
            python3 fifo_portfolio_vs.py
            python3 fetch_holdings_vs.py
            python3 date_ext_vs.py
            python3 data_val_vs.py
            bash combined_run_vs.sh
            echo "::endgroup::"
          fi
