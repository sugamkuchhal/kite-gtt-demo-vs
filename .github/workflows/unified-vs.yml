name: Unified Script Runner VS

on:
  schedule:
    - cron: "0,30 4-9 * * 1-5"   # 09:30â€“15:00 IST every 30 min
    - cron: "30 11 * * 1-5"      # 17:00 IST EOD
  workflow_dispatch:
    inputs:
      command:
        description: "Optional command (e.g. python3 fetch_holdings_vs.py)"
        required: false
        default: ""
      run_type:
        description: "auto / midday / eod"
        required: false
        type: choice
        options: [auto, midday, eod]
        default: auto

concurrency:
  group: unified-script-runner-vs
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Create venv and base deps
        shell: bash
        run: |
          set -e
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install kiteconnect requests

      # Write secrets (access token comes from nightly refresh), then preflight
      - name: Write secrets and preflight auth
        id: preflight
        shell: bash
        env:
          API_KEY_VS: ${{ secrets.API_KEY_VS }}         # 5 lines: key,secret,user,pass,totp
          ACCESS_TOKEN_VS: ${{ secrets.ACCESS_TOKEN_VS }} # from nightly refresh workflow
          CREDS_VS_JSON: ${{ secrets.CREDS_VS_JSON }}   # Google creds for your scripts
        run: |
          set -e
          # Secrets to files expected by your scripts
          printf '%s' "${API_KEY_VS}" > api_key_vs.txt
          printf '%s' "${ACCESS_TOKEN_VS:-}" > access_token_vs.txt
          if [ -n "${CREDS_VS_JSON:-}" ]; then
            printf '%s' "${CREDS_VS_JSON}" > creds_vs.json
          fi

          source .venv/bin/activate
          # Preflight Python (cheap margins() call to validate token)
          cat > preflight.py << 'PY'
from kiteconnect import KiteConnect
import sys, pathlib

api_lines = pathlib.Path("api_key_vs.txt").read_text().splitlines()
if not api_lines:
    sys.exit(2)
api_key = api_lines[0].strip()

tok_file = pathlib.Path("access_token_vs.txt")
if not tok_file.exists() or tok_file.stat().st_size == 0:
    sys.exit(3)  # no token -> need refresh

token = tok_file.read_text().strip()
kite = KiteConnect(api_key=api_key)
kite.set_access_token(token)

try:
    kite.margins()  # raises if invalid/expired
    sys.exit(0)     # ok
except Exception:
    sys.exit(4)     # invalid -> need refresh
PY

          if python preflight.py; then
            echo "auth_status=ok" >> "$GITHUB_OUTPUT"
            echo "::notice::Kite preflight: ok (using saved access token)"
          else
            echo "auth_status=refresh" >> "$GITHUB_OUTPUT"
            echo "::notice::Kite preflight: refresh needed (token invalid/missing)"
          fi

      - name: Abort if refresh needed (token invalid)
        if: ${{ steps.preflight.outputs.auth_status == 'refresh' }}
        shell: bash
        run: |
          echo "::error::Access token invalid or missing. Nightly refresh (12:30 AM IST) will update ACCESS_TOKEN_VS."
          exit 1

      - name: Install full project deps
        shell: bash
        run: |
          set -e
          source .venv/bin/activate
          pip install \
            gspread gspread-formatting kiteconnect pandas requests \
            retrying tqdm google-auth google-auth-oauthlib google-auth-httplib2 \
            selenium pyotp yfinance oauth2client google-api-python-client

      # Full chain: manual override OR auto/midday/eod selection (IST window)
      - name: Run trading chain
        env:
          INPUT_COMMAND: ${{ github.event.inputs.command }}
          RUN_TYPE: ${{ github.event.inputs.run_type }}
        shell: bash
        run: |
          set -e
          source .venv/bin/activate

          # 1) Manual command override
          if [ -n "${INPUT_COMMAND:-}" ]; then
            echo "::notice::Running manual command: ${INPUT_COMMAND}"
            eval "${INPUT_COMMAND}"
            exit 0
          fi

          # 2) Decide run_type (default auto) based on IST clock
          hm_to_min(){ IFS=: read -r h m <<<"$1"; echo $((10#$h*60 + 10#$m)); }
          NOW_HM="$(TZ=Asia/Kolkata date +%H:%M)"
          NOW_MIN="$(hm_to_min "$NOW_HM")"
          MID_START="$(hm_to_min 09:00)"
          MID_END="$(hm_to_min 15:45)"
          RT="${RUN_TYPE:-auto}"
          IN_MIDDAY=false
          if [ $NOW_MIN -ge $MID_START ] && [ $NOW_MIN -le $MID_END ]; then
            IN_MIDDAY=true
          fi

          case "$RT" in
            midday)
              echo "::notice::run_type=midday selected"
              RUN_MIDDAY=true
              ;;
            eod)
              echo "::notice::run_type=eod selected"
              RUN_MIDDAY=false
              ;;
            auto|*)
              echo "::notice::run_type=auto; current IST time is $NOW_HM"
              if [ "$IN_MIDDAY" = true ]; then
                RUN_MIDDAY=true
              else
                RUN_MIDDAY=false
              fi
              ;;
          esac

          # 3) Execute chosen chain
          if [ "$RUN_MIDDAY" = true ]; then
            echo "::group::RUN: Mid-day chain (VS)"
            python3 set_field_false_vs.py
            python3 fetch_all_gtts_vs.py
            python3 fetch_all_orders_vs.py
            python3 gtt_processor_vs.py --sheet-id "145TqrpQ3Twx6Tezh28s5GnbowlBb_qcY5UM1RvfIclI" --sheet-name "DEL_GTT_INS"
            python3 gtt_processor_vs.py --sheet-id "145TqrpQ3Twx6Tezh28s5GnbowlBb_qcY5UM1RvfIclI" --sheet-name "INS_GTT_INS"
            python3 gtt_processor_vs.py --sheet-id "145TqrpQ3Twx6Tezh28s5GnbowlBb_qcY5UM1RvfIclI" --sheet-name "GTT_INS"
            echo "::endgroup::"
          else
            echo "::group::RUN: EOD chain (VS)"
            python3 set_field_false_vs.py
            python3 fetch_all_gtts_vs.py
            python3 fetch_all_orders_vs.py
            python3 append_new_orders_vs.py
            python3 fifo_portfolio_vs.py
            python3 fetch_holdings_vs.py
            python3 date_ext_vs.py
            python3 data_val_vs.py
            bash combined_run_vs.sh
            echo "::endgroup::"
          fi
