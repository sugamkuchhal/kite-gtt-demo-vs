name: Unified Script Runner VS

on:
  workflow_dispatch:
    inputs:
      command:
        description: "Optional command (e.g. python3 fetch_holdings_vs.py)"
        required: false
        default: ""
      run_type:
        description: "auto / midday / eod"
        required: false
        type: choice
        options:
          - auto
          - midday
          - eod
        default: auto

concurrency:
  group: unified-script-runner-vs
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Create venv and base deps
        shell: bash
        run: |
          set -e
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install kiteconnect requests selenium pyotp webdriver-manager

      - name: Write secrets into $RUNNER_TEMP and link into CWD
        shell: bash
        env:
          API_KEY_VS: ${{ secrets.API_KEY_VS }}       # 5 lines: key,secret,user,pass,totp
          ACCESS_TOKEN_VS: ${{ secrets.ACCESS_TOKEN_VS }}
          CREDS_VS_JSON: ${{ secrets.CREDS_VS_JSON }}
        run: |
          set -e
          tmp="$RUNNER_TEMP"; mkdir -p "$tmp"

          # api_key_vs.txt (required, 5 lines)
          if [ -z "${API_KEY_VS:-}" ]; then
            echo "::error::Secret API_KEY_VS is empty. It must contain 5 lines: api_key, api_secret, user_id, password, totp_seed."
            exit 1
          fi
          printf '%s' "$API_KEY_VS" > "$tmp/api_key_vs.txt"

          # Optional access token from secrets (used to skip Chrome)
          printf '%s' "${ACCESS_TOKEN_VS:-}" > "$tmp/access_token_vs.txt"

          # Optional Google creds for your later scripts
          if [ -n "${CREDS_VS_JSON:-}" ]; then
            printf '%s' "$CREDS_VS_JSON" > "$tmp/creds_vs.json"
          fi

          # Symlink into CWD because your scripts read/write here
          ln -sf "$tmp/api_key_vs.txt" ./api_key_vs.txt
          ln -sf "$tmp/access_token_vs.txt" ./access_token_vs.txt
          [ -f "$tmp/creds_vs.json" ] && ln -sf "$tmp/creds_vs.json" ./creds_vs.json || true

      - name: Decide if Chrome/login is needed
        id: need
        shell: bash
        run: |
          set -e
          if [ -s "./access_token_vs.txt" ]; then
            echo "refresh=no" >> "$GITHUB_OUTPUT"
            echo "::notice::Token present from secrets; skipping Chrome/login."
          else
            echo "refresh=yes" >> "$GITHUB_OUTPUT"
            echo "::notice::No token present; will install Chrome and login."
          fi

      - name: Setup Chrome (JIT)
        if: ${{ steps.need.outputs.refresh == 'yes' }}
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Refresh token headlessly (only if needed)
        if: ${{ steps.need.outputs.refresh == 'yes' }}
        shell: bash
        env:
          CI: "true"
        run: |
          set -e
          source .venv/bin/activate
          python3 auto_login_vs.py
          if [ ! -s ./access_token_vs.txt ]; then
            echo "::error::No token after login"
            exit 1
          fi
          # Keep a safe copy in $RUNNER_TEMP and symlink (optional)
          cp ./access_token_vs.txt "$RUNNER_TEMP/access_token_vs.txt"
          rm -f ./access_token_vs.txt
          ln -sf "$RUNNER_TEMP/access_token_vs.txt" ./access_token_vs.txt

      - name: Install full project deps
        shell: bash
        run: |
          set -e
          source .venv/bin/activate
          pip install \
            gspread gspread-formatting kiteconnect pandas requests \
            retrying tqdm google-auth google-auth-oauthlib google-auth-httplib2 \
            selenium pyotp yfinance oauth2client google-api-python-client

      - name: Run (manual command or auto/midday/eod)
        env:
          INPUT_COMMAND: ${{ github.event.inputs.command }}
          RUN_TYPE: ${{ github.event.inputs.run_type }}
        shell: bash
        run: |
          set -e
          source .venv/bin/activate

          # Manual command override
          if [ -n "${INPUT_COMMAND:-}" ]; then
            echo "::notice::manual: $INPUT_COMMAND"
            eval "$INPUT_COMMAND"
            exit 0
          fi

          # Auto/midday/eod switch using IST time
          hm_to_min(){ IFS=: read -r h m <<<"$1"; echo $((10#$h*60+10#$m)); }
          NOW_HM="$(TZ=Asia/Kolkata date +%H:%M)"
          NOW_MIN="$(hm_to_min "$NOW_HM")"
          MID_START="$(hm_to_min 09:00)"
          MID_END="$(hm_to_min 15:45)"
          RT="${RUN_TYPE:-auto}"
          IN_MIDDAY=false
          [ $NOW_MIN -ge $MID_START ] && [ $NOW_MIN -le $MID_END ] && IN_MIDDAY=true || true

          case "$RT" in
            midday) RUN_MIDDAY=true ;;
            eod)    RUN_MIDDAY=false ;;
            *)      RUN_MIDDAY=$([ "$IN_MIDDAY" = true ] && echo true || echo false) ;;
          esac

          if [ "$RUN_MIDDAY" = true ]; then
            echo "::group::RUN: Mid-day chain (VS)"
            python3 set_field_false_vs.py
            python3 fetch_all_gtts_vs.py
            python3 fetch_all_orders_vs.py
            python3 gtt_processor_vs.py --sheet-id "145TqrpQ3Twx6Tezh28s5GnbowlBb_qcY5UM1RvfIclI" --sheet-name "DEL_GTT_INS"
            python3 gtt_processor_vs.py --sheet-id "145TqrpQ3Twx6Tezh28s5GnbowlBb_qcY5UM1RvfIclI" --sheet-name "INS_GTT_INS"
            python3 gtt_processor_vs.py --sheet-id "145TqrpQ3Twx6Tezh28s5GnbowlBb_qcY5UM1RvfIclI" --sheet-name "GTT_INS"
            echo "::endgroup::"
          else
            echo "::group::RUN: EOD chain (VS)"
            python3 set_field_false_vs.py
            python3 fetch_all_gtts_vs.py
            python3 fetch_all_orders_vs.py
            python3 append_new_orders_vs.py
            python3 fifo_portfolio_vs.py
            python3 fetch_holdings_vs.py
            python3 date_ext_vs.py
            python3 data_val_vs.py
            bash combined_run_vs.sh
            echo "::endgroup::"
          fi
